<% getGlobalImports().forEach((globalImport) => { -%>
<%- globalImport %>
<% }); -%>
import { AsyncLock, BaseEntity, LoadParams, toArrayMap, toObjectMap, nonNull, unique } from '<%= config.airentPackage %>';
<% if (!schema.internal || schema.fields.some(isInternalType)) { -%>

/** generated */
import {
  <%= getThisEntityStrings().fieldRequestClass %>,
  <%= getThisEntityStrings().responseClass %>,
  <%_ schema.types.filter(isInternalType).forEach((type) => { -%>
  <%= getTypeStrings(type).typeName %>,
  <%_ }); -%>
} from './<%= getThisEntityStrings().typePackage %>';
<% } -%>
<% if (schema.types.some(isEntityType)) { -%>

/** associations */
  <%_ schema.types.filter(isEntityType).forEach((type) => { -%>
import { <%= getTypeStrings(type).entityClass %> } from '../<%= getTypeStrings(type).entityPackage %>';
  <%_ }); -%>
<% } -%>
<% if (schema.types.some(isExternalType)) { -%>

/** external types */
  <%_ schema.types.filter(isExternalType).forEach((type) => { -%>
import { <%= getTypeStrings(type).externalClass %> } from '<%= getTypeStrings(type).externalPackage %>';
  <%_ }); -%>
<% } -%>

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export class <%= getThisEntityStrings().baseClass %> extends BaseEntity<
  <%= schema.modelName %><%= schema.internal ? '' : `, ${getThisEntityStrings().fieldRequestClass}, ${getThisEntityStrings().responseClass}` %>
> {
<% schema.fields.filter(isPrimitiveField).forEach((field) => { -%>
  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= field.name %>: <%= getFieldStrings(field).fieldType %>;
<% }); -%>

<% schema.fields.filter(isAssociationField).forEach((field) => { -%>
  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected <%= field.name %>?: <%= getFieldStrings(field).fieldType %>;
<% }); -%>

  public constructor(
    model: <%= schema.modelName %>,
    group: <%= getThisEntityStrings().baseClass %>[],
    lock: AsyncLock,
  ) {
    super(group, lock);

<% schema.fields.filter(isPrimitiveField).forEach((field) => { -%>
    this.<%= field.name %> = <%= getFieldStrings(field).fieldInitializer %>;
<% }); -%>

    this.initialize();
  }
<% if (!schema.internal) { -%>

  public static defaultFieldRequest: <%= getThisEntityStrings().fieldRequestClass %> = {
  <%_ schema.fields.filter(isDefaultPresentableField).forEach((field) => { -%>
    <%= field.name %>: true,
  <%_ }); -%>
  };

  public async present(request?: <%= getThisEntityStrings().fieldRequestClass %> | boolean): Promise<<%= getThisEntityStrings().responseClass %>> {
    if (request === false) {
      throw new Error('unprocessable field request');
    }
    const fieldRequest = request === true || request === undefined
      ? <%= getThisEntityStrings().baseClass %>.defaultFieldRequest
      : request;
    return {
  <%_ schema.fields.filter(isExternalField).forEach((field) => { -%>
      <%= field.name %>: <%- getFieldStrings(field).fieldPresenter %>,
  <%_ }); -%>
    };
  }
<% } -%>
<% if (schema.fields.some(isAssociationField)) { -%>

  /** associations */
<% } -%>
<% schema.fields.filter(isAssociationField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected <%= `${field.name}Params` %>: LoadParams<<%= getThisEntityStrings().baseClass %>, <%= getFieldStrings(field).fieldClass %>> = {
    name: '<%= getFieldParamsName(field) %>',
    filter: (one: <%= getThisEntityStrings().baseClass %>) => one.<%= field.name %> === undefined,
  <%_ if (!isLoaderGeneratable(field)) { -%>
    // TODO: build your association data loader
  <%_ } -%>
    <%= isLoaderGeneratable(field) ? '' : '// ' %>loader: async (array: <%= getThisEntityStrings().baseClass %>[]) => {
  <%_ getSourceFields(field).forEach((sourceField) => { -%>
    <%= isLoaderGeneratable(field) ? '' : '// ' %>  const <%= sourceField.name %>s = unique((nonNull(array.map((one) => one.<%= getFieldGetterName(sourceField) %>))));
  <%_ }); -%>
    <%= isLoaderGeneratable(field) ? '' : '// ' %>  const loadedModels = <%- getTargetLoadedModels(field) %>;
    <%= isLoaderGeneratable(field) ? '' : '// ' %>  return <%= getFieldStrings(field).fieldClass %>.fromArray(loadedModels);
    <%= isLoaderGeneratable(field) ? '' : '// ' %>},
  <%_ if (!isSetterGeneratable(field)) { -%>
    // TODO: build your association data setter
  <%_ } -%>
    <%= isSetterGeneratable(field) ? '' : '// ' %>setter: (array: <%= getThisEntityStrings().baseClass %>[], loaded: <%= getFieldStrings(field).fieldClass %>[]) => {
    <%= isSetterGeneratable(field) ? '' : '// ' %>  const map = <%- getTargetMap(field) %>;
    <%= isSetterGeneratable(field) ? '' : '// ' %>  array.forEach((one) => (one.<%= field.name %> = <%- getSourceSetter(field) %>));
    <%= isSetterGeneratable(field) ? '' : '// ' %>},
  };

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected async <%= `load${toTitleCase(field.name)}` %>(): Promise<void> {
    await this.load(this.<%= `${field.name}Params` %>);
  }

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= getFieldStrings(field).fieldGetterName %>: Promise<<%= getFieldStrings(field).fieldType %>> {
    if (this.<%= field.name %> !== undefined) {
      return this.<%= field.name %>;
    }
    await this.<%= `load${toTitleCase(field.name)}` %>();
    return this.<%= field.name %><%= isNullableField(field) ? ' ?? null' : '!' %>;
  }

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= `set${toTitleCase(field.name)}` %>(<%= field.name %>?: <%= getFieldStrings(field).fieldType %>): void {
    this.<%= field.name %> = <%= field.name %>;
  }
<% }); -%>
<% if (schema.fields.some(isComputedSyncField)) { -%>

  /** computed sync fields */
<% } -%>
<% schema.fields.filter(isComputedSyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= getFieldStrings(field).fieldGetterName %>: <%= getFieldStrings(field).fieldType %> {
    throw new Error('not implemented');
  }
<% }); -%>
<% if (schema.fields.some(isComputedAsyncField)) { -%>

  /** computed async fields */
<% } -%>
<% schema.fields.filter(isComputedAsyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= getFieldStrings(field).fieldGetterName %>: Promise<<%= getFieldStrings(field).fieldType %>> {
    throw new Error('not implemented');
  }
<% }); -%>
}
