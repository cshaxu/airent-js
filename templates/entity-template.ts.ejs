<% getGlobalImports().forEach((globalImport) => { -%>
<%- globalImport %>
<% }); -%>
<% getEntityExtraImports().forEach((line) => { -%>
<%- line %>
<% }); -%>
import { LoadKey, toArrayMap, toObjectMap } from '<%= config.airentPackageForSkippable %>';
import { <%= schema.strings.baseClass %> } from './generated/<%= schema.strings.basePackage %>';
<% if (!schema.internal || schema.fields.some(utils.isCustomType)) { -%>
import {
  <%_ if (!schema.internal) { -%>
  <%= schema.strings.fieldRequestClass %>,
  <%= schema.strings.responseClass %>,
  <%_ } -%>
  <%_ schema.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from './generated/<%= schema.strings.typePackage %>';
<% } -%>
<% schema.types.filter(utils.isEntityType).filter((type) => type.name !== schema.entityName).forEach((type) => { -%>
import { <%= type.strings.entityClass %> } from './<%= type.strings.entityPackage %>';
<% }); -%>
<% schema.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
<% }); -%>

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export class <%= schema.strings.entityClass %> extends <%= schema.strings.baseClass %> {
<% if (schema.fields.filter(utils.isAssociationField).some((field) => !isAssociationFieldGeneratable(field))) { -%>
  protected initialize() {
    super.initialize();

    /** associations */
  <%_ schema.fields.filter(utils.isAssociationField).forEach((field) => { -%>
    <%_ if (!isGetterGeneratable(field)) { -%>

    this.<%= `${field.name}LoadConfig` %>.getter = (sources: <%= schema.strings.baseClass %>[]) => {
      <%_ getLoadConfigGetterLines(field).forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    };
    <%_ } -%>
    <%_ if (!isLoaderGeneratable(field)) { -%>

    this.<%= `${field.name}LoadConfig` %>.loader = async (keys: LoadKey[]) => {
      <%_ getLoadConfigLoaderLines(field).forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    };
    <%_ } -%>
    <%_ if (!isSetterGeneratable(field)) { -%>

    this.<%= `${field.name}LoadConfig` %>.setter = ((sources: <%= schema.strings.entityClass %>[], targets: <%= field.strings.fieldClass %>[]) => {
      <%_ getLoadConfigSetterLines(field).forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    }) as (sources: <%= schema.strings.baseClass %>[], targets: <%= field.strings.fieldClass %>[]) => Promise<void>;
    <%_ } -%>
  <%_ }); -%>
  }
<% } -%>
<% if (schema.fields.some(utils.isComputedSyncField)) { -%>

  /** computed sync fields */
<% } -%>
<% schema.fields.filter(utils.isComputedSyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= getFieldGetterName(field) %>: <%= field.strings.fieldType %> {
    throw new Error('not implemented');
  }
<% }); -%>
<% if (schema.fields.some(utils.isComputedAsyncField)) { -%>

  /** computed async fields */
<% } -%>
<% schema.fields.filter(utils.isComputedAsyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= getFieldGetterName(field) %>: Promise<<%= field.strings.fieldType %>> {
    throw new Error('not implemented');
  }
<% }); -%>
<% getEntityExtraLines().forEach((line) => { -%>
<%= line.length > 0 ? '  ' : '' %><%- line %>
<% }); -%>
}
