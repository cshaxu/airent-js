<% getGlobalImports().forEach((globalImport) => { -%>
<%- globalImport %>
<% }); -%>
import { LoadKey, toArrayMap, toObjectMap } from '<%= config.airentPackageForSkippable %>';
import { <%= getThisEntityStrings().baseClass %> } from './generated/<%= getThisEntityStrings().basePackage %>';
<% if (!schema.internal || schema.fields.some(isInternalType)) { -%>
import {
  <%_ if (!schema.internal) { -%>
  <%= getThisEntityStrings().fieldRequestClass %>,
  <%= getThisEntityStrings().responseClass %>,
  <%_ } -%>
  <%_ schema.types.filter(isInternalType).forEach((type) => { -%>
  <%= getTypeStrings(type).typeName %>,
  <%_ }); -%>
} from './generated/<%= getThisEntityStrings().typePackage %>';
<% } -%>
<% schema.types.filter(isEntityType).filter((type) => type.name !== schema.entityName).forEach((type) => { -%>
import { <%= getTypeStrings(type).entityClass %> } from './<%= getTypeStrings(type).entityPackage %>';
<% }); -%>
<% schema.types.filter(isExternalType).forEach((type) => { -%>
import { <%= getTypeStrings(type).externalClass %> } from '<%= getTypeStrings(type).externalPackage %>';
<% }); -%>

<% if (schema.deprecated) { -%>
/** @deprecated */
<% } -%>
export class <%= getThisEntityStrings().entityClass %> extends <%= getThisEntityStrings().baseClass %> {
<% if (schema.fields.some(isAssociationField)) { -%>
  protected initialize() {
    super.initialize();

    /** associations */
  <%_ schema.fields.filter(isAssociationField).forEach((field) => { -%>
    <%_ if (!isGetterGeneratable(field)) { -%>

    this.<%= `${field.name}LoadConfig` %>.getter = (sources: <%= getThisEntityStrings().baseClass %>[]) => sources
      <%_ getLoadConfigGetterLines(field, ';').forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    <%_ } -%>
    <%_ if (!isLoaderGeneratable(field)) { -%>

    this.<%= `${field.name}LoadConfig` %>.loader = async (keys: LoadKey[]) => {
      <%_ if (isEntityTypeField(field)) { -%>
      const loadedModels = <%- getTargetLoadedModels(field) %>;
      return <%= getFieldStrings(field).fieldClass %>.fromArray(loadedModels);
      <%_ } else { -%>
      return <%- getTargetLoadedModels(field) %>;
      <%_ } -%>
    };
    <%_ } -%>
    <%_ if (!isSetterGeneratable(field)) { -%>

    this.<%= `${field.name}LoadConfig` %>.setter = ((sources: <%= getThisEntityStrings().entityClass %>[], targets: <%= getFieldStrings(field).fieldClass %>[]) => {
      const map = <%- getTargetMap(field) %>;
      sources.forEach((one) => (one.<%= field.name %> = <%- getSourceSetter(field) %>));
    }) as (sources: <%= getThisEntityStrings().baseClass %>[], targets: <%= getFieldStrings(field).fieldClass %>[]) => Promise<void>;
    <%_ } -%>
  <%_ }); -%>
  }
<% } -%>
<% if (schema.fields.some(isComputedSyncField)) { -%>

  /** computed sync fields */
<% } -%>
<% schema.fields.filter(isComputedSyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= getFieldGetterName(field) %>: <%= getFieldStrings(field).fieldType %> {
    throw new Error('not implemented');
  }
<% }); -%>
<% if (schema.fields.some(isComputedAsyncField)) { -%>

  /** computed async fields */
<% } -%>
<% schema.fields.filter(isComputedAsyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= getFieldGetterName(field) %>: Promise<<%= getFieldStrings(field).fieldType %>> {
    throw new Error('not implemented');
  }
<% }); -%>
}
