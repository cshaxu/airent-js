<%
/** string utils */

function toKababCase(string) {
  return string
    .replace(/_/g, '-')
    .replace(/([a-z])([A-Z])/g, '$1-$2')
    .toLowerCase();
}

function toTitleCase(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

/** field utils */

function isAssociationField(field) { return field.strategy === 'association'; }
function isComputedSyncField(field) { return field.strategy === 'computed_sync'; }
function isComputedAsyncField(field) { return field.strategy === 'computed_async'; }
function isImportableField(field) { return isAssociationField(field) || field.imports?.length; }
function isPrimitiveField(field) { return field.strategy === 'primitive'; }
function isExternalField(field) { return !field.internal; }
function isSyncField(field) { return isPrimitiveField(field) || isComputedSyncField(field); }

/** class utils */

function getModuleSuffix() { return isModule ? '.js' : ''; }

function getEntityStrings() {
  const prefix = toKababCase(entityName);
  const suffix = getModuleSuffix();
  return {
    entName: entityName,
    baseClass: `${entityName}EntityBase`,
    entityClass: `${entityName}Entity`,
    fieldRequestClass: `${entityName}FieldRequest`,
    responseClass: `${entityName}Response`,
    basePackage: `${prefix}-base${suffix}`,
    entityPackage: `${prefix}${suffix}`,
    typePackage: `${prefix}-type${suffix}`,
  };
}

function getAssociationStrings(field) {
  const entName = toTitleCase(field.type.split("|")[0].split("[]")[0].trim());

  const prefix = toKababCase(entName);
  const suffix = getModuleSuffix();

  const entityClass = `${entName}Entity`;
  const responseClass = `${entName}Response`;

  return {
    entName,
    entityClass,
    fieldRequestClass: `${entName}FieldRequest`,
    responseClass,
    entityPackage: `${prefix}${suffix}`,
    typePackage: `${prefix}-type${suffix}`,
    entityFieldType: field.type.replace(entName, entityClass),
    responseFieldType: field.type.replace(entName, responseClass),
  };
}

/** association utils */

function getFieldParamsName(field) {
  const className = getEntityStrings().entityClass;
  const fieldName = field.name;
  return `${className}.${fieldName}`;
}

/** type template specific utils */

function getFieldRequestType(field) {
  if (isAssociationField(field)) {
    const { fieldRequestClass } = getAssociationStrings(field);
    return `${fieldRequestClass} | boolean`;
  }
  return 'boolean';
}

function getFieldResponseType(field) {
  if (isAssociationField(field)) {
    return getAssociationStrings(field).responseFieldType;
  }
  return field.type;
}

/** type template follows */
-%>
<% fields
  .filter((field) => isExternalField(field) && isAssociationField(field))
  .forEach((field) => { -%>
import { <%= getAssociationStrings(field).fieldRequestClass %>, <%= getAssociationStrings(field).responseClass %> } from './<%= getAssociationStrings(field).typePackage %>';
<% }); -%>
<% fields
  .filter((field) => isExternalField(field) && isImportableField(field) && !isAssociationField(field))
  .flatMap((field) => field.imports)
  .filter((_import) => _import.name)
  .forEach((_import) => { -%>
import { <%= _import.name %> } from '<%= _import.package %>';
<% }); -%>

export type <%= getEntityStrings().fieldRequestClass %> = {
<% fields.filter(isExternalField).forEach((field) => { -%>
  <%= field.name %>?: <%= getFieldRequestType(field) %>;
<% }); -%>
};

export type <%= getEntityStrings().responseClass %> = {
<% fields.filter(isExternalField).forEach((field) => { -%>
  <%= field.name %>?: <%= getFieldResponseType(field) %>;
<% }); -%>
};
