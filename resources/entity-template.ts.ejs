<%
function isLoadConfigGeneratable(field) {
  const { loadConfig } = field.code;
  return utils.isAssociationField(field) &&
    loadConfig.isGetterGeneratable &&
    loadConfig.isLoaderGeneratable &&
    loadConfig.isSetterGeneratable;
}
-%>
<% entity.code.beforeEntity.forEach((line) => { -%>
<%- line %>
<% }); -%>
import { LoadKey, toArrayMap, toObjectMap } from '<%= airentPackage %>';
import { <%= entity.strings.baseClass %> } from './generated/<%= entity.strings.basePackage %>';
<% if (utils.isPresentableEntity(entity) || entity.fields.some(utils.isCustomType)) { -%>
import {
  <%_ if (utils.isPresentableEntity(entity)) { -%>
  <%= entity.strings.fieldRequestClass %>,
  <%= entity.strings.responseClass %>,
  <%= entity.strings.selectedResponseClass %>,
  <%_ } -%>
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from './generated/<%= entity.strings.typePackage %>';
<% } -%>
<% entity.types.filter(utils.isEntityType).filter((t) => t.name !== entity.name).forEach((type) => { -%>
import { <%= type.strings.entityClass %> } from './<%= type.strings.entityPackage %>';
<% }); -%>
<% entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
<% }); -%>

<% if (entity.deprecated) { -%>
/** @deprecated */
<% } -%>
export class <%= entity.strings.entityClass %> extends <%= entity.strings.baseClass %> {
<% if (entity.fields.filter(utils.isAssociationField).some((field) => !isLoadConfigGeneratable(field))) { -%>
  protected initialize(model: <%= entity.model %>) {
    super.initialize(model);

    /** associations */
  <%_ entity.fields.filter(utils.isAssociationField).forEach((field) => { -%>
    <%_ if (!field.code.loadConfig.isGetterGeneratable) { -%>

    this.<%= `${field.name}LoadConfig` %>.getter = (sources: <%= entity.strings.baseClass %>[]) => {
      <%_ template.functions.getLoadConfigGetterLines(field).forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    };
    <%_ } -%>
    <%_ if (!field.code.loadConfig.isLoaderGeneratable) { -%>

    this.<%= `${field.name}LoadConfig` %>.loader = async (keys: LoadKey[]) => {
      <%_ template.functions.getLoadConfigLoaderLines(field).forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    };
    <%_ } -%>
    <%_ if (!field.code.loadConfig.isSetterGeneratable) { -%>

    this.<%= `${field.name}LoadConfig` %>.setter = ((sources: <%= entity.strings.entityClass %>[], targets: <%= field.strings.fieldClass %>[]) => {
      <%_ template.functions.getLoadConfigSetterLines(field).forEach((line) => { -%>
      <%- line %>
      <%_ }); -%>
    }) as (sources: <%= entity.strings.baseClass %>[], targets: <%= field.strings.fieldClass %>[]) => Promise<void>;
    <%_ } -%>
  <%_ }); -%>
  }
<% } -%>
<% if (entity.fields.some(utils.isComputedSyncField)) { -%>

  /** computed sync fields */
<% } -%>
<% entity.fields.filter(utils.isComputedSyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= field.strings.fieldGetter %>: <%= field.strings.fieldType %> {
    throw new Error('not implemented');
  }
<% }); -%>
<% if (entity.fields.some(utils.isComputedAsyncField)) { -%>

  /** computed async fields */
<% } -%>
<% entity.fields.filter(utils.isComputedAsyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= field.strings.fieldGetter %>: Promise<<%= field.strings.fieldType %>> {
    throw new Error('not implemented');
  }
<% }); -%>
<% entity.code.insideEntity.forEach((line) => { -%>
<%= line.length > 0 ? '  ' : '' %><%- line %>
<% }); -%>
}
<% entity.code.afterEntity.forEach((line) => { -%>
<%- line %>
<% }); -%>
