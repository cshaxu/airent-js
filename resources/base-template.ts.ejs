<%
function getDeduplicatedPrimitiveFields(entity) {
  return entity.fields.filter(utils.isPrimitiveField).filter((field, index, self) =>
    self.findIndex((t) => (t.aliasOf ?? t.name) === (field.aliasOf ?? field.name)) === index
  );
}
-%>
<% entity._code.beforeBase.forEach((line) => { -%>
<%- line %>
<% }); -%>
// airent imports
import {
  AsyncLock,
  BaseEntity,
  EntityConstructor,
  LoadConfig,
  LoadKey,
  Select,
  sequential,
  toArrayMap,
  toObjectMap,
} from '<%- config._packages.baseToLibFull %>';

// config imports
import { Context } from '<%- config._packages.baseToContextFull %>';
<% if (utils.isPresentableEntity(entity) || entity.types.some(utils.isCustomType)) { -%>

// entity imports
<% if (entity.types.some(utils.isImportType)) { -%>
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type._strings.externalClass %> } from '<%- type._packages.baseToExternalFull %>';
  <%_ }); -%>
<% } -%>
<% if (entity.types.some(utils.isEntityType)) { -%>
  <%_ entity.types.filter(utils.isEntityType).forEach((type) => { -%>
import { <%= type._strings.entityClass %> } from '<%- config._packages.baseToEntityPath %>/<%= type._entity._strings.moduleName %>';
  <%_ }); -%>
<% } -%>
import {
  <%_ if (utils.isPresentableEntity(entity)) { -%>
  <%= entity._strings.fieldRequestClass %>,
  <%= entity._strings.responseClass %>,
  <%= entity._strings.selectedResponseClass %>,
  <%_ } -%>
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from '<%- config._packages.baseToTypePath %>/<%= entity._strings.moduleName %>';
<% } -%>

<% if (entity.deprecated) { -%>
/** @deprecated */
<% } -%>
export class <%= entity._strings.baseClass %> extends BaseEntity<
  <%= entity.model %>, Context<%= utils.isPresentableEntity(entity) ? `, ${entity._strings.fieldRequestClass}, ${entity._strings.responseClass}`: '' %>
> {
  private originalModel: <%= entity.model %>;

<% entity.fields.filter(utils.isPrimitiveField).forEach((field) => { -%>
  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= field.name %>!: <%= field._strings.fieldType %>;
<% }); -%>
<% entity.fields.filter(utils.isAssociationField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected <%= field.name %>?: <%= field._strings.fieldType %>;
<% }); -%>

  public constructor(
    model: <%= entity.model %>,
    context: Context,
    group: <%= entity._strings.baseClass %>[],
    lock: AsyncLock,
  ) {
    super(context, group, lock);
    this.originalModel = { ...model };
    this.fromModel(model);
    this.initialize(model, context);
  }

  public fromModel(model: Partial<<%= entity.model %>>): void {
<% entity.fields.filter(utils.isPrimitiveField).forEach((field) => { -%>
    if ('<%= field.aliasOf ?? field.name %>' in model && model['<%= field.aliasOf ?? field.name %>'] !== undefined) {
      this.<%= field.name %> = <%= field._strings.fieldInitializer %>;
    }
<% }); -%>
<% entity.fields.filter(utils.isAssociationField).forEach((field) => { -%>
    this.<%= field.name %> = undefined;
<% }); -%>
  }

  public toModel(): Partial<<%= entity.model %>> {
    return {
<% getDeduplicatedPrimitiveFields(entity).forEach((field) => { -%>
      <%= field.aliasOf ?? field.name %>: this.<%= field.name %><%= field.cast === true ? ' as any' : '' %>,
<% }); -%>
    };
  }

  public toDirtyModel(): Partial<<%= entity.model %>> {
    const dirtyModel: Partial<<%= entity.model %>> = {};
  <%_ entity.fields.filter(utils.isPrimitiveField).forEach((field) => { -%>
    if ('<%= field.aliasOf ?? field.name %>' in this.originalModel && <%- field.cast === true ? `JSON.stringify(this.originalModel['${field.aliasOf ?? field.name}']) !== JSON.stringify(this.${field.name})` : `this.originalModel['${field.aliasOf ?? field.name}'] !== this.${field.name}` %>) {
      dirtyModel['<%= field.aliasOf ?? field.name %>'] = this.<%= field.name %><%= field.cast === true ? ' as any' : '' %>;
    }
  <%_ }); -%>
    return dirtyModel;
  }
<% if (entity.keys?.length && !(entity.skipRefresher || entity.skipUpdater || entity.skipDeleter)) { -%>

  /** mutators */
<% } -%>
<% if (entity.keys?.length && !entity.skipRefresher) { -%>

  public async reload(): Promise<this> {
    <%_ template.functions.getReloaderLines(entity).forEach((line) => { -%>
    <%- line %>
    <%_ }); -%>
  }
<% } -%>
<% if (entity.keys?.length && !entity.skipUpdater) { -%>

  public async save(): Promise<this> {
    <%_ template.functions.getSaverLines(entity).forEach((line) => { -%>
    <%- line %>
    <%_ }); -%>
  }
<% } -%>
<% if (entity.keys?.length && !entity.skipDeleter) { -%>

  public async delete(): Promise<this> {
    <%_ template.functions.getDeleterLines(entity).forEach((line) => { -%>
    <%- line %>
    <%_ }); -%>
  }
<% } -%>
<% if (utils.isPresentableEntity(entity)) { -%>

  public async present<S extends <%= entity._strings.fieldRequestClass %>>(fieldRequest: S): Promise<<%= entity._strings.selectedResponseClass %><S>> {
    await this.beforePresent(fieldRequest);
    const response = {
  <%_ entity.fields.filter(utils.isPresentableField).forEach((field) => { -%>
      ...(fieldRequest.<%= field.name %> !== undefined && { <%= field.name %>: <%- field._code.presenter %> }),
  <%_ }); -%>
    };
    await this.afterPresent(fieldRequest, response as Select<<%= entity._strings.responseClass %>, S>);
    return response as <%= entity._strings.selectedResponseClass %><S>;
  }

  public static async presentMany<
    ENTITY extends <%= entity._strings.baseClass %>,
    S extends <%= entity._strings.fieldRequestClass %>
  >(entities: ENTITY[], fieldRequest: S): Promise<<%= entity._strings.selectedResponseClass %><S>[]> {
    return await sequential(entities.map((one) => () => one.present(fieldRequest)));
  }
<% } -%>
<% if (!entity.skipSelfLoader) { -%>

  /** self loaders */

  public static async getOne<ENTITY extends <%= entity._strings.baseClass %>>(
    this: EntityConstructor<<%= entity.model %>, Context, ENTITY>,
    key: LoadKey
  ): Promise<ENTITY | null> {
    return await (this as any)
      .getMany([key])
      .then((array: ENTITY[]) => array.length > 0 ? array[0] : null);
  }

  public static async getMany<ENTITY extends <%= entity._strings.baseClass %>>(
    this: EntityConstructor<<%= entity.model %>, Context, ENTITY>,
    keys: LoadKey[],
    context: Context
  ): Promise<ENTITY[]> {
    <%_ template.functions.getSelfLoaderLines(entity).forEach((line) => { -%>
    <%- line %>
    <%_ }); -%>
  }
<% } -%>
<% if (entity.fields.some(utils.isAssociationField)) { -%>

  /** associations */
<% } -%>
<% entity.fields.filter(utils.isAssociationField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected <%= `${field.name}LoadConfig` %>: LoadConfig<<%= entity._strings.baseClass %>, <%= field._strings.fieldClass %>> = {
    name: '<%= field._code.loadConfig.name %>',
    filter: (one: <%= entity._strings.baseClass %>) => one.<%= field.name %> === undefined,
  <%_ if (!field._code.loadConfig.isGetterGeneratable) { -%>
    // TODO: build your association key getter
  <%_ } -%>
    <%= field._code.loadConfig.isGetterGeneratable ? '' : '// ' %>getter: (sources: <%= entity._strings.baseClass %>[]) => {
  <%_ template.functions.getLoadConfigGetterLines(field).forEach((line) => { -%>
    <%= field._code.loadConfig.isGetterGeneratable ? '' : '// ' %>  <%- line %>
  <%_ }); -%>
    <%= field._code.loadConfig.isGetterGeneratable ? '' : '// ' %>},
  <%_ if (!field._code.loadConfig.isLoaderGeneratable) { -%>
    // TODO: build your association data loader
  <%_ } -%>
    <%= field._code.loadConfig.isLoaderGeneratable ? '' : '// ' %>loader: async (keys: LoadKey[]) => {
  <%_ template.functions.getLoadConfigLoaderLines(field).forEach((line) => { -%>
    <%= field._code.loadConfig.isLoaderGeneratable ? '' : '// ' %>  <%- line %>
  <%_ }); -%>
    <%= field._code.loadConfig.isLoaderGeneratable ? '' : '// ' %>},
  <%_ if (!field._code.loadConfig.isSetterGeneratable) { -%>
    // TODO: build your association value setter
  <%_ } -%>
    <%= field._code.loadConfig.isSetterGeneratable ? '' : '// ' %>setter: (sources: <%= entity._strings.baseClass %>[], targets: <%= field._strings.fieldClass %>[]) => {
  <%_ template.functions.getLoadConfigSetterLines(field).forEach((line) => { -%>
    <%= field._code.loadConfig.isSetterGeneratable ? '' : '// ' %>  <%- line %>
  <%_ }); -%>
    <%= field._code.loadConfig.isSetterGeneratable ? '' : '// ' %>},
  };

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= field._strings.fieldGetter %>: Promise<<%= field._strings.fieldType %>> {
    if (this.<%= field.name %> !== undefined) {
      return this.<%= field.name %>;
    }
    await this.load(this.<%= `${field.name}LoadConfig` %>);
    return this.<%= field.name %><%= utils.isNullableField(field) ? ' ?? null' : '!' %>;
  }

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= `set${utils.toPascalCase(field.name)}` %>(<%= field.name %>?: <%= field._strings.fieldType %>): void {
    this.<%= field.name %> = <%= field.name %>;
  }
<% }); -%>
<% if (entity.fields.some(utils.isComputedSyncField)) { -%>

  /** computed sync fields */
<% } -%>
<% entity.fields.filter(utils.isComputedSyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= field._strings.fieldGetter %>: <%= field._strings.fieldType %> {
    throw new Error('not implemented');
  }
<% }); -%>
<% if (entity.fields.some(utils.isComputedAsyncField)) { -%>

  /** computed async fields */
<% } -%>
<% entity.fields.filter(utils.isComputedAsyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= field._strings.fieldGetter %>: Promise<<%= field._strings.fieldType %>> {
    throw new Error('not implemented');
  }
<% }); -%>
<% entity._code.insideBase.forEach((line) => { -%>
<%= line.length > 0 ? '  ' : '' %><%- line %>
<% }); -%>
}
<% entity._code.afterBase.forEach((line) => { -%>
<%= line.length > 0 ? '  ' : '' %><%- line %>
<% }); -%>
