<% entity.code.beforeBase.forEach((line) => { -%>
<%- line %>
<% }); -%>
import {
  AsyncLock,
  BaseEntity,
  EntityConstructor,
  LoadConfig,
  LoadKey,
  toArrayMap,
  toObjectMap,
} from '<%= config.airentPackageForGenerated %>';
<% if (utils.isPresentableEntity(entity) || entity.types.some(utils.isCustomType)) { -%>

/** generated */
import {
  <%_ if (utils.isPresentableEntity(entity)) { -%>
  <%= entity.strings.fieldRequestClass %>,
  <%= entity.strings.responseClass %>,
  <%_ } -%>
  <%_ entity.types.filter(utils.isCustomType).forEach((type) => { -%>
  <%= type.name %>,
  <%_ }); -%>
} from './<%= entity.strings.typePackage %>';
<% } -%>
<% if (entity.types.some(utils.isEntityType)) { -%>

/** associations */
  <%_ entity.types.filter(utils.isEntityType).forEach((type) => { -%>
import { <%= type.strings.entityClass %> } from '../<%= type.strings.entityPackage %>';
  <%_ }); -%>
<% } -%>
<% if (entity.types.some(utils.isImportType)) { -%>

/** external types */
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
<% } -%>

<% if (entity.deprecated) { -%>
/** @deprecated */
<% } -%>
export class <%= entity.strings.baseClass %> extends BaseEntity<
  <%= entity.model %><%= utils.isPresentableEntity(entity) ? `, ${entity.strings.fieldRequestClass}, ${entity.strings.responseClass}`: '' %>
> {
<% entity.fields.filter(utils.isPrimitiveField).forEach((field) => { -%>
  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= field.name %>: <%= field.strings.fieldType %>;
<% }); -%>
<% entity.fields.filter(utils.isAssociationField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected <%= field.name %>?: <%= field.strings.fieldType %>;
<% }); -%>

  public constructor(
    model: <%= entity.model %>,
    group: <%= entity.strings.baseClass %>[],
    lock: AsyncLock,
  ) {
    super(group, lock);

<% entity.fields.filter(utils.isPrimitiveField).forEach((field) => { -%>
    this.<%= field.name %> = <%= field.strings.fieldInitializer %>;
<% }); -%>

    this.initialize();
  }
<% if (utils.isPresentableEntity(entity)) { -%>

  public static defaultFieldRequest: <%= entity.strings.fieldRequestClass %> = {
  <%_ entity.fields.filter(utils.isDefaultPresentableField).forEach((field) => { -%>
    <%= field.name %>: true,
  <%_ }); -%>
  };

  public async present(request?: <%= entity.strings.fieldRequestClass %> | boolean): Promise<<%= entity.strings.responseClass %>> {
    if (request === false) {
      throw new Error('unprocessable field request');
    }
    const fieldRequest = request === true || request === undefined
      ? <%= entity.strings.baseClass %>.defaultFieldRequest
      : request;
    return {
  <%_ entity.fields.filter(utils.isPresentableField).forEach((field) => { -%>
      <%= field.name %>: <%- field.code.presenter %>,
  <%_ }); -%>
    };
  }
<% } -%>
<% if (!entity.skipSelfLoader) { -%>

  /** self loaders */

  public static async getOne<ENTITY extends <%= entity.strings.baseClass %>>(
    this: EntityConstructor<<%= entity.model %>, ENTITY>,
    key: LoadKey
  ): Promise<ENTITY | null> {
    return await (this as any)
      .getMany([key])
      .then((array: ENTITY[]) => array.at(0) ?? null);
  }

  public static async getMany<ENTITY extends <%= entity.strings.baseClass %>>(
    this: EntityConstructor<<%= entity.model %>, ENTITY>,
    keys: LoadKey[]
  ): Promise<ENTITY[]> {
    <%_ template.functions.getSelfLoaderLines(entity).forEach((line) => { -%>
    <%- line %>
    <%_ }); -%>
  }
<% } -%>
<% if (entity.fields.some(utils.isAssociationField)) { -%>

  /** associations */
<% } -%>
<% entity.fields.filter(utils.isAssociationField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  protected <%= `${field.name}LoadConfig` %>: LoadConfig<<%= entity.strings.baseClass %>, <%= field.strings.fieldClass %>> = {
    name: '<%= field.code.loadConfig.name %>',
    filter: (one: <%= entity.strings.baseClass %>) => one.<%= field.name %> === undefined,
  <%_ if (!field.code.loadConfig.isGetterGeneratable) { -%>
    // TODO: build your association key getter
  <%_ } -%>
    <%= field.code.loadConfig.isGetterGeneratable ? '' : '// ' %>getter: (sources: <%= entity.strings.baseClass %>[]) => {
  <%_ template.functions.getLoadConfigGetterLines(field).forEach((line) => { -%>
    <%= field.code.loadConfig.isGetterGeneratable ? '' : '// ' %>  <%- line %>
  <%_ }); -%>
    <%= field.code.loadConfig.isGetterGeneratable ? '' : '// ' %>},
  <%_ if (!field.code.loadConfig.isLoaderGeneratable) { -%>
    // TODO: build your association data loader
  <%_ } -%>
    <%= field.code.loadConfig.isLoaderGeneratable ? '' : '// ' %>loader: async (keys: LoadKey[]) => {
  <%_ template.functions.getLoadConfigLoaderLines(field).forEach((line) => { -%>
    <%= field.code.loadConfig.isLoaderGeneratable ? '' : '// ' %>  <%- line %>
  <%_ }); -%>
    <%= field.code.loadConfig.isLoaderGeneratable ? '' : '// ' %>},
  <%_ if (!field.code.loadConfig.isSetterGeneratable) { -%>
    // TODO: build your association value setter
  <%_ } -%>
    <%= field.code.loadConfig.isSetterGeneratable ? '' : '// ' %>setter: (sources: <%= entity.strings.baseClass %>[], targets: <%= field.strings.fieldClass %>[]) => {
  <%_ template.functions.getLoadConfigSetterLines(field).forEach((line) => { -%>
    <%= field.code.loadConfig.isSetterGeneratable ? '' : '// ' %>  <%- line %>
  <%_ }); -%>
    <%= field.code.loadConfig.isSetterGeneratable ? '' : '// ' %>},
  };

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= field.strings.fieldGetter %>: Promise<<%= field.strings.fieldType %>> {
    if (this.<%= field.name %> !== undefined) {
      return this.<%= field.name %>;
    }
    await this.load(this.<%= `${field.name}LoadConfig` %>);
    return this.<%= field.name %><%= utils.isNullableField(field) ? ' ?? null' : '!' %>;
  }

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= `set${utils.toTitleCase(field.name)}` %>(<%= field.name %>?: <%= field.strings.fieldType %>): void {
    this.<%= field.name %> = <%= field.name %>;
  }
<% }); -%>
<% if (entity.fields.some(utils.isComputedSyncField)) { -%>

  /** computed sync fields */
<% } -%>
<% entity.fields.filter(utils.isComputedSyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public <%= field.strings.fieldGetter %>: <%= field.strings.fieldType %> {
    throw new Error('not implemented');
  }
<% }); -%>
<% if (entity.fields.some(utils.isComputedAsyncField)) { -%>

  /** computed async fields */
<% } -%>
<% entity.fields.filter(utils.isComputedAsyncField).forEach((field) => { -%>

  <%_ if (field.deprecated) { -%>
  /** @deprecated */
  <%_ } -%>
  public async <%= field.strings.fieldGetter %>: Promise<<%= field.strings.fieldType %>> {
    throw new Error('not implemented');
  }
<% }); -%>
<% entity.code.insideBase.forEach((line) => { -%>
<%= line.length > 0 ? '  ' : '' %><%- line %>
<% }); -%>
}
<% entity.code.afterBase.forEach((line) => { -%>
<%= line.length > 0 ? '  ' : '' %><%- line %>
<% }); -%>
