<% getTypeBeforeLines().forEach((line) => { -%>
<%- line %>
<% }); -%>
<% if (!utils.isPresentableEntity(entity) || entity.types.some(utils.isCustomType)) { -%>
  <%_ entity.types.filter(utils.isPresentableEntityType).filter((type) => type.name !== entity.name).forEach((type) => { -%>
import { <%= type.strings.fieldRequestClass %>, <%= type.strings.responseClass %> } from './<%= type.strings.typePackage %>';
  <%_ }); -%>
  <%_ entity.types.filter(utils.isImportType).forEach((type) => { -%>
import { <%= type.strings.externalClass %> } from '<%= type.strings.externalPackage %>';
  <%_ }); -%>
<% } -%>
<% if (entity.types.some(utils.isEnumType)) { -%>

/** enums */
  <%_ entity.types.filter(utils.isEnumType).forEach((type) => { -%>

    <%_ if (type.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
export enum <%= type.name %> <%- type.strings.typeDefinition %>;
  <%_ }); -%>
<% } -%>
<% if (entity.types.some(utils.isDefineType)) { -%>

/** structs */
  <%_ entity.types.filter(utils.isDefineType).forEach((type) => { -%>

    <%_ if (type.deprecated) { -%>
/** @deprecated */
    <%_ } -%>
export type <%= type.name %> = <%- type.strings.typeDefinition %>;
  <%_ }); -%>
<% } -%>
<% if (!entity.internal) { -%>

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export type <%= entity.strings.fieldRequestClass %> = {
  <%_ entity.fields.filter(utils.isPresentableField).forEach((field) => { -%>
    <%_ if (field.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  <%= field.name %>?: <%= field.strings.fieldRequestType %>;
  <%_ }); -%>
};

  <%_ if (entity.deprecated) { -%>
/** @deprecated */
  <%_ } -%>
export type <%= entity.strings.responseClass %> = {
  <%_ entity.fields.filter(utils.isPresentableField).forEach((field) => { -%>
    <%_ if (field.deprecated) { -%>
  /** @deprecated */
    <%_ } -%>
  <%= field.name %>?: <%= field.strings.fieldResponseType %>;
  <%_ }); -%>
};
<% } -%>
<% getTypeAfterLines().forEach((line) => { -%>
<%- line %>
<% }); -%>
